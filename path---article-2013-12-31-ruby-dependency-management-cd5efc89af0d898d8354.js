webpackJsonp([65319895800833],{426:function(e,a){e.exports={data:{site:{siteMetadata:{title:"Urban Faubion / Design Technologist",author:"Urban Faubion"}},markdownRemark:{id:"/Users/urban/Documents/Projects/urban.github.io/data/article/2013-12-31-ruby-dependency-management/index.md absPath of file >>> MarkdownRemark",html:'<p>In the Ruby community you have a lot of choices when it comes to versions of the language and implementations. This is part of the reason I love Ruby but it can also become hell unless you have a way of managing your development environment and project specific dependencies. What you need is an easy way to switch between Ruby versions along with the <em>context</em> on either a local directory or system-wide basis.</p>\n<p>I recently changed Ruby version manager and thought I’d write it down for posterity and in case others might like to do the same.</p>\n<ol>\n<li>Ruby version switcher - <code class="language-text">chruby</code></li>\n<li>Ruby version installer - <code class="language-text">ruby-install</code></li>\n<li>Switch Ruby version based on <em>context</em> - <code class="language-text">.ruby-version</code></li>\n<li>Project specific dependency management - <code class="language-text">bundler</code></li>\n</ol>\n<h2>Ruby Version Switcher</h2>\n<p><code class="language-text">chruby</code> is new when compared with the other options like <a href="http://github.com/wayneeseguin/rvm">rvm</a> or <a href="https://github.com/sstephenson/rbenv/">rbenv</a> however I decided to make the switch because I like it’s design simplicity and I feel it adheres to the <a href="http://en.wikipedia.org/wiki/Unix_philosophy#Mike_Gancarz:_The_UNIX_Philosophy">Unix Philosophies</a> better than the other. For instance, <code class="language-text">rvm</code> doesn’t just do one thing, it can install Ruby versions, manage gemsets and more. In addition it overrides <code class="language-text">cd</code> for <em>context</em> switching which for many is a major violation. <code class="language-text">rbenv</code> on the other hand only manages Ruby versions however it does <em>context</em> switching through a series of <a href="https://github.com/sstephenson/rbenv/#understanding-shims">shims</a> each time any Ruby or gem binary is executed and requires you to run <code class="language-text">rbenv rehash</code> whenever a new binary is installed. This is very cumbersome and unnecessarily complicated.</p>\n<p><code class="language-text">chruby</code> takes a different, simpler approach. At it’s core, it only modifies a few environment variables so the correct binary and set of libraries are loaded and uses <a href="http://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/x264.html">PROMPT_COMMAND</a> to switch between <em>contexts</em>.</p>\n<p>There are several ways of <a href="https://github.com/postmodern/chruby#install">installing</a> <code class="language-text">chruby</code>. Since I develop on OSX, I used the following with <a href="http://brew.sh">Homebrew</a>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">brew install chruby</code></pre>\n      </div>\n<p>Next, add the following line to your <em>profile</em> file (e.g. <code class="language-text">.bashrc</code> or <code class="language-text">.zshrc</code>, etc). This will allow <code class="language-text">chruby</code> to search for installed Ruby versions (located in <code class="language-text">~/.rubies</code> or <code class="language-text">/opt/rubies</code> by default):</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">source /usr/local/opt/chruby/share/chruby/chruby.sh</code></pre>\n      </div>\n<p><strong>Note:</strong> Terminal in OSX opens a login shell and doesn’t source <code class="language-text">~/.bashrc</code> like other *inux flavors. To solve this, “require” the <code class="language-text">~/.bashrc</code> file by adding the following to your <code class="language-text">~/.bash_profile</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">[[ -s ~/.bashrc ]] &amp;&amp; source ~/.bashrc</code></pre>\n      </div>\n<h2>Ruby Version Installer</h2>\n<p>Since I like the approach of <code class="language-text">chruby</code> I decided to use <a href="https://github.com/postmodern/ruby-install">ruby-install</a> by the same author instead of <a href="https://github.com/sstephenson/ruby-build">ruby-build</a> for Ruby version installing. This is necessary because <code class="language-text">chruby</code> only “changes” the version being used. Type the following to install it on OSX with Homebrew:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">brew install ruby-install</code></pre>\n      </div>\n<p>Once installed, <code class="language-text">ruby-install</code> makes it dead simple to install Ruby versions. To see a list of available Ruby versions type:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">ruby-install</code></pre>\n      </div>\n<p>To install <a href="http://en.wikipedia.org/wiki/Ruby_MRI">Ruby MRI</a> 2.0 and 1.9, type:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">ruby-install ruby\nruby-install ruby 1.9</code></pre>\n      </div>\n<h2>Auto-switching Ruby versions</h2>\n<p>With <code class="language-text">chruby</code>, you can auto-switch your Ruby version when you <code class="language-text">cd</code> (change <em>context</em>) between different projects. When you enter a directory containing a <code class="language-text">.ruby-version</code> file, <code class="language-text">chruby</code> will automatically switch things for you. To opt in to this feature, add the following to your <em>profile</em> (e.g. <code class="language-text">.bashrc</code> or <code class="language-text">.zshrc</code>, etc):</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">source /usr/local/share/chruby/auto.sh</code></pre>\n      </div>\n<p>With auto-switching enabled, you can set your “default” Ruby version to <code class="language-text">1.9</code> by dropping a <code class="language-text">.ruby-version</code> into your <code class="language-text">$HOME</code> directory with the following:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">1.9.3-p484</code></pre>\n      </div>\n<p>You can also specify which version of Ruby to use on a project by project basis by adding a <code class="language-text">.ruby-version</code> file to the “root” directory.</p>\n<h2>Installing project dependencies</h2>\n<p>With <a href="http://bundler.io">Bundler</a>, you can easily share your project across development environments and other team members. It maintains a consistent environment by installing dependencies specified in a <code class="language-text">Gemfile</code> and make them available to your application.</p>\n<p>Type the following to install:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">gem install bundler</code></pre>\n      </div>\n<p>Next, create a <code class="language-text">Gemfile</code> in the “root” directory of your project. This can be done by running the following in Terminal:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">bundle init</code></pre>\n      </div>\n<p>Open the <code class="language-text">Gemfile</code> add your specific dependencies:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">source &#39;https://rubygems.org&#39;\n\ngem &#39;rack&#39;\ngem &#39;rspec&#39;, :require =&gt; &#39;spec&#39;</code></pre>\n      </div>\n<p>By default, <code class="language-text">bundler</code> will install dependencies to your default system location for gems. While this is great, I prefer to keep things local whenever possible. To install them to <code class="language-text">vendor/bundle</code> type:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">bundle install --path vendor/bundle</code></pre>\n      </div>\n<p>This creates a <code class="language-text">Gemfile.lock</code> file in your project. This file is basically a manifest that describes the specific versions of the dependencies when your application last worked correctly.</p>\n<p>To run executables that come with a gem installed with <code class="language-text">bundler</code> use:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">bundle exec rspec spec/models</code></pre>\n      </div>\n<p>Or you can create scoped shortcuts to the executables. By typing the following, <code class="language-text">bundler</code> will install them into the <code class="language-text">bin</code> directory of your project:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">bundle install --binstubs</code></pre>\n      </div>\n<p>To execute them, type the following:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">bin/rspec spec/models</code></pre>\n      </div>\n<h2>Summary</h2>\n<p>Below are the entries for my <code class="language-text">~/.bashrc</code> file:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">if [[ -e /usr/local/share/chruby ]]; then\n  source /usr/local/opt/chruby/share/chruby/chruby.sh\n  source /usr/local/share/chruby/auto.sh\n  chruby $(cat ~/.ruby-version)\nfi</code></pre>\n      </div>\n<p>Overall I think that <code class="language-text">chrbuy</code> with <code class="language-text">bundler</code> is a simple and elegant solution for managing Ruby versions and individual project dependencies.</p>',frontmatter:{title:"Managing Ruby",date:"December 31, 2013"}}},pathContext:{slug:"/article/2013-12-31-ruby-dependency-management/",previous:{fields:{slug:"/article/2013-09-24-tmux/"},frontmatter:{title:"Using tmux",draft:null}},next:{fields:{slug:"/article/2014-01-02-new-mac-setup/"},frontmatter:{title:"New Mac Setup",draft:null}}}}}});
//# sourceMappingURL=path---article-2013-12-31-ruby-dependency-management-cd5efc89af0d898d8354.js.map