webpackJsonp([0xe9aeaddf9840],{425:function(e,n){e.exports={data:{site:{siteMetadata:{title:"Urban Faubion / Design Technologist",author:"Urban Faubion"}},markdownRemark:{id:"/Users/urban/Documents/Projects/urban.github.io/data/article/2013-09-24-tmux/index.md absPath of file >>> MarkdownRemark",html:'<p>I recently came across several <a href="https://www.google.com/webhp?sourceid=chrome-instant&#x26;ie=UTF-8#hl=en&#x26;output=search&#x26;sclient=psy-ab&#x26;q=tmux%20tutorial&#x26;oq=&#x26;gs_l=&#x26;pbx=1&#x26;fp=45c3b9a0a6db80f8&#x26;bav=on.2,or.r_gc.r_pw.r_cp.r_qf.,cf.osb&#x26;biw=1110&#x26;bih=825">getting started</a> articles on <a href="http://tmux.sourceforge.net/">tmux</a> and decided to augment my existing workflow to take advantage of it. After getting over the initial hurdle of learning the <a href="https://gist.github.com/MohamedAlaa/2961058">tmux specific commands</a>, things have been great. Below is a brief overview of what <code class="language-text">tmux</code> is, how to use it and also highlight some of it’s features.</p>\n<h2>Sessions</h2>\n<p><code class="language-text">tmux</code> is a terminal multiplexer, meaning it allows you to run multiple virtual terminal sessions. Sessions are completely separate work environments. I create different named sessions for each project I’m working on. This is useful because as long as you don’t re-boot your computer, you can <em>detach</em> from the session and <em>attach</em> to the session at will while preserved context: <em>working directories</em>, <em>command history</em> and <em>processes</em>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text"># start new\ntmux\n\n# starts a new session session_name\ntmux new -s session_name (prefix + :new -s session_name)\n\n# starts a new session name the same as current directory\ntmux new -s `basename $PWD`\n\n# attach\ntmux a # (or at, or attach)\n\n# attach to an existing session named session_name\ntmux attach -t session_name\ntmux a -t session_name\n\n# switch to an existing session named session_name\ntmux switch -t session_name\n\n# lists existing sessions\ntmux list-sessions (prefix + s)\ntmux ls\n\n# detach the currently attached session\ntmux detach (prefix + d)\n\n# kill session\ntmux kill-session -t session_name\n\n# rename session\nprefix + $</code></pre>\n      </div>\n<h2>Windows</h2>\n<p>Each session can have multiple windows that provide a tabbing interface. With them you can quickly move switch windows using keyboard shortcuts similar to how you <code class="language-text">Alt+Tab</code> between OS windows.</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text"># create a new window\nprefix + c\n\n# list windows / window numbers\nprefix + w\n\n# move to the window based on index\nprefix + 0-9\n\n# rename the current window\nprefix + ,\n\n# kill the current window\nprefix + &amp;</code></pre>\n      </div>\n<h2>Panes</h2>\n<p>Panes allow you to split your <em>windows</em> into multiple <em>panes</em> both vertically and horizontally. This is great for viewing multiple command line utilities or scripts in development without hiding them behind tabs or making them background processes.</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text"># split the window into two vertical panes\nprefix + &quot;\n\n# split the window into two horizontal panes\nprefix + %\n\n# swap pane with another in the specific direction\nprefix + { or }\n\n# select the next pane in the specified direction (arrow keys)\nprefix + [UDLR]\n\n# toggle between pane layouts (space key)\nprefix + ⍽\n\n# for scrolling, enter copy-mode and then use arrow keys and exit w/ ESC\nprefix + [\n\n# kill the current pane\nprefix + x</code></pre>\n      </div>\n<h2>Configuration</h2>\n<p>Out of the box <code class="language-text">tmux</code> has sane defaults however you can customize it with your own configuration file. Below is my <code class="language-text">~/.tmux.conf</code> file.</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text"># utf8\nset-window-option -g utf8 on\n\n# fix the titles\nset -g set-titles on\nset -g set-titles-string &quot;#I:#W&quot;\n\n# 1-based window indexing\nset -g base-index 1\n\n# switch currently focused pane by mouse click\nsetw -g mode-mouse on\nset-option -g mouse-select-pane on\n\n# increase history to 100k\nset -g history-limit 100000\n\n# aggressive resize\nsetw -g aggressive-resize on\n\n# load custom key bindings\nsource-file ~/.tmux.keys</code></pre>\n      </div>\n<p>And my <code class="language-text">~/.tmux.keys</code> file.</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text"># remap prefix to match GNU screen (i.e. CTRL+a)\nset -g prefix C-a\nunbind C-b\nbind C-a send-prefix\n\n# force a reload of the config file\nunbind r\nbind r source-file ~/.tmux.conf\n\n# quick pane cycling\nunbind ^A\nbind ^A select-pane -t :.+\n\n# make the split panes more mnemonic\nunbind &#39;&quot;&#39;\nunbind %\nbind \\ split-window -h\nbind - split-window -v</code></pre>\n      </div>\n<h2>Workflow</h2>\n<p>I often work on several different client and personal projects throughout the day. By naming both my <code class="language-text">tmux</code> sessions and windows, I’m able to switch between them quickly and get back to right where I left off with my preserved command history in each pane. In addition, I usually split my windows into 2-3 panes so I have visibility of the <code class="language-text">stdout</code> and <code class="language-text">stderr</code> streams from my development tools. This gives me visibility into what’s happening vs. hiding them with background processes or terminal tabs.</p>\n<h2>Conclusion</h2>\n<p>Adding <code class="language-text">tmux</code> to my development workflow has been a great improvement over what I was doing, making me more productive. Hopefully you’ll find it as useful as I have.</p>',frontmatter:{title:"Using tmux",date:"September 24, 2013"}}},pathContext:{slug:"/article/2013-09-24-tmux/",previous:{fields:{slug:"/article/2013-05-20-templating-with-inheritance/"},frontmatter:{title:"Templating With Inheritance",draft:null}},next:{fields:{slug:"/article/2013-12-31-ruby-dependency-management/"},frontmatter:{title:"Managing Ruby",draft:null}}}}}});
//# sourceMappingURL=path---article-2013-09-24-tmux-e2f4ddce5fdd0f9d8b80.js.map